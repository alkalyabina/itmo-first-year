\begin{lstlisting}
ORG 000
I_RET: WORD 0000         ; адрес возврата из прерывания
I_HANDLER_START:
  NOP                    ; точка останова в начале прерывания
  BR I_HANDLER
I_SAVED_A: WORD 0000     ; сохраненный A
I_SAVED_C: WORD 0000     ; сохраненный C

ORG 006
X: WORD 0000
MAX_X: WORD 0015         ; число 21, верхняя граница ОДЗ
MIN_X_ABS: WORD 0014     ; число 20, модуль нижней границы ОДЗ
MAGIC_DEC: WORD FFFD     ; число -3, вычитаемое из X в главном цикле

ORG 100
BEGIN:
MAIN_LOOP:               ; === главный цикл
  CLA
  ADD MAGIC_DEC          ; сложение с магической константой -3
  DI                     ; запрещение прерываний для предотвращения
                         ;   перезаписи циклом X, который мог быть
                         ;   изменен обработчиком прерывания
  ADD X
  JSR CHECK_X            ; проверка на соответствие ОДЗ
  MOV X
  EI                     ; X записан, прерывания могут быть разрешены
  BR MAIN_LOOP

HANDLE_DEV2: WORD 0000   ; === обработка второго устройства
  CLA
  IN 2
  CLF 2
  AND X                  ; логическое умножение
  JSR CHECK_X            ; проверка на ОДЗ
  NOP                    ; точка останова перед записью X
  MOV X
  BR (HANDLE_DEV2)
HANDLE_DEV3: WORD 0000   ; === обработка третьего устройства
  JSR CALC_FUN           ; вычисление функции с сохранением значения
                         ;   в аккумуляторе
  OUT 3
  CLF 3
  BR (HANDLE_DEV3)

ORG 200
CHECK_X: WORD 0000       ; === проверка ОДЗ
  CHECK_MAX:
    SUB MAX_X            ; если результат вычитания из числа
    BPL RESET_X          ;   максимальной границы неотрицательный,
                         ;   оно выходит за пределы ОДЗ или равно ему
  RESTORE_AFTER_MAX:
    ADD MAX_X
  CHECK_MIN:
    ADD MIN_X_ABS        ; если результат сложения числа с модулем
    BMI RESET_X          ;   минимальной границы отрицательный,
                         ;   оно выходит за пределы ОДЗ
  RESTORE_AFTER_MIN:
    SUB MIN_X_ABS
  BR (CHECK_X)
  RESET_X:
    CLA
    ADD MAX_X            ; установка X в максимальную границу ОДЗ
    BR (CHECK_X)

CALC_FUN: WORD 0000      ; === вычисление F(X) = 6X - 3
  CLA
  ADD X
  ROL                    ; умножение на 2 - A = X * 2
  ADD X                  ; прибавление X - A = X * 3
  ROL                    ; умножение на 2 - A = X * 6
  ADD MAGIC_DEC          ; вычитание 3
  NOP                    ; точка останова с результатом функции
  BR (CALC_FUN)

ORG 300
I_HANDLER:               ; === обработчик прерываний
  I_SAVE_REGISTERS:
    MOV I_SAVED_A        ; сохранение А
    ROL
    MOV I_SAVED_C        ; сохранение С
  
  I_CHECK_DEV2:          ; проверка второго устройства
    TSF 2           
    BR I_CHECK_DEV3      ; пропуск обработчика, если устройство не готово
  JSR HANDLE_DEV2        ; передача управления обработчику прерывания,
                         ;   который отвечает за сброс флага

  I_CHECK_DEV3:          ; проверка третьего устройства
    TSF 3
    BR I_FINISH          ; пропуск обработчика, если устройство не готово
  JSR HANDLE_DEV3        ; передача управления обработчику прерывания,
                         ;   который отвечает за сброс флага

  I_FINISH:              ; конец обработчика прерываний,
  I_RESTORE_REGISTERS:   ; восстановление регистров
    CLA                  ; восстановление C
    ADD I_SAVED_C
    ROR
    CLA                  ; восстановление A:
    CMA                  ; так как ADD обнуляет carry, используется
    AND I_SAVED_A        ;   логическое умножение сохраненного А с FFFF
  NOP                    ; конец обработки прерываний
  EI
  BR (I_RET)
\end{lstlisting}

\vspace*{1cm}
\section*{Изменения, внесенные в программу}

\begin{lstlisting}
diff --git a/csb/lab6.basm b/csb/lab6.basm
index 72cca0b..b30847e 100644
--- a/csb/lab6.basm
+++ b/csb/lab6.basm
@@ -12,3 +12,3 @@ MAX_X: WORD 0015         ; число 21, верхняя граница ОДЗ
 MIN_X_ABS: WORD 0014     ; число 20, модуль нижней границы ОДЗ
-MAGIC_DEC: WORD 00FD     ; число -3 в восьмиб. представлении
+MAGIC_DEC: WORD FFFD     ; число -3, вычитаемое из X в главном цикле
 
@@ -17,11 +17,11 @@ BEGIN:
 MAIN_LOOP:               ; === главный цикл
-  DI                     ; запрещение прерываний для предотвращения
-                         ;   race condition: измененный обработчиком пр. X
-                         ;   может быть перезаписан в данном цикле
   CLA
+  ADD MAGIC_DEC          ; сложение с магической константой -3
+  DI                     ; запрещение прерываний для предотвращения
+                         ;   перезаписи циклом X, который мог быть
+                         ;   изменен обработчиком прерывания
   ADD X
-  ADD MAGIC_DEC          ; сложение X с магической константой (-3)
-  JSR CHECK_X            ; проверка на ОДЗ
+  JSR CHECK_X            ; проверка на соответствие ОДЗ
   MOV X
-  EI                     ; X записан; прерывания могут быть разрешены
+  EI                     ; X записан, прерывания могут быть разрешены
   BR MAIN_LOOP
@@ -32,6 +32,5 @@ HANDLE_DEV2: WORD 0000   ; === обработка второго устройс
   CLF 2
-  NOP                    ; точка останова после ввода логических значений
   AND X                  ; логическое умножение
   JSR CHECK_X            ; проверка на ОДЗ
-  NOP                    ; точка останова после проверки на ОДЗ
+  NOP                    ; точка останова перед записью X
   MOV X
@@ -45,24 +44,16 @@ HANDLE_DEV3: WORD 0000   ; === обработка третьего устрой
 
+ORG 200
 CHECK_X: WORD 0000       ; === проверка ОДЗ
-  AND 8BIT_MASK          ; обнуление старших бит, которые могут быть = 1
-                         ;   в результате переноса в арифметических операциях
-  MOV CONVERT_X_TEMP     ; сохранение значения X до проверки
-  CHECK_MIN:
-    ADD MIN_X_ABS        ; сложение восьмиб. числа с константой,
-                         ;   которое приведет к отрицательному восьмиб.
-                         ;   значению, если X выходит
-    AND 8BIT_SIGN        ; логическое умножение для выявления знака числа
-    BEQ CHECK_MAX        ; если знак > 0, то
-    BR RESET_X           ;   число нужно сбросить
-  RESTORE_X:
-    CLA 
-    ADD CONVERT_X_TEMP
   CHECK_MAX:
-    SUB MAX_X              ; если число при вычитании верхней границы + 1
-                           ;   становится неотрицательным, его нужно сбросить
-    AND 8BIT_SIGN          ; логическое умножения для выявления знака числа
-    BEQ RESET_X            ; если знак = 0, то число нужно сбросить
-  RESTORE_X_2:
-    CLA
-    ADD CONVERT_X_TEMP
+    SUB MAX_X            ; если результат вычитания из числа
+    BPL RESET_X          ;   максимальной границы неотрицательный,
+                         ;   оно выходит за пределы ОДЗ или равно ему
+  RESTORE_AFTER_MAX:
+    ADD MAX_X
+  CHECK_MIN:
+    ADD MIN_X_ABS        ; если результат сложения числа с модулем
+    BMI RESET_X          ;   минимальной границы отрицательный,
+                         ;   оно выходит за пределы ОДЗ
+  RESTORE_AFTER_MIN:
+    SUB MIN_X_ABS
   BR (CHECK_X)
@@ -72,5 +63,2 @@ CHECK_X: WORD 0000       ; === проверка ОДЗ
     BR (CHECK_X)
-  8BIT_MASK: WORD 00FF
-  8BIT_SIGN: WORD 0080
-  CONVERT_X_TEMP: WORD 0000
 
@@ -86,3 +74,3 @@ CALC_FUN: WORD 0000      ; === вычисление F(X) = 6X - 3
 
-ORG 200
+ORG 300
 I_HANDLER:               ; === обработчик прерываний
@@ -93,5 +81,2 @@ I_HANDLER:               ; === обработчик прерываний
   
-  I_CHECK_DEV1:          ; проверка первого устройства
-  CLF 1                  ; ВУ1 не используется
-
   I_CHECK_DEV2:          ; проверка второго устройства
\end{lstlisting}
